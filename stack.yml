AWSTemplateFormatVersion: 2010-09-09
Description: API stack for stonk trading

Parameters:
  ApiGatewayStageName:
    Type: String
    AllowedPattern: "[a-z0-9]+"
    Default: dev
  LambdaFunctionName:
    Type: String
    AllowedPattern: "[a-zA-Z0-9]+[a-zA-Z0-9-]+[a-zA-Z0-9]+"
    Default: trade-stonks

Resources:
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref LambdaFunctionName
      Description: Stonk Trading function
      Runtime: nodejs12.x
      Role: !GetAtt LambdaIAMRole.Arn
      Handler: index.handler
      Code:
        ZipFile: |
          const AWS = require("aws-sdk");
          const dynamoClient = new AWS.DynamoDB.DocumentClient();

          exports.handler = async (event) => {
            let response
            if (event.httpMethod === 'GET'){
              try {
                response = await dynamoClient.scan({ TableName: "good-stonks-table" }).promise();
                return {
                  statusCode: 200,
                  body: JSON.stringify(response)
                };
              } catch (error) {
                console.log('Retrieve trades error: ' + error)
              }
            };
            if (event.httpMethod === 'POST'){
              let requestJSON = JSON.parse(event.body);
              try{
                await dynamoClient
                .put({
                  TableName: "good-stonks-table",
                  Item: {
                    company: requestJSON.company,
                    action: requestJSON.action,
                    price: requestJSON.price,
                    volume: requestJSON.volume,
                    timestamp: event.requestContext.requestTime
                  }
                })
                .promise();
                return {
                  statusCode: 200,
                  body: JSON.stringify({
                    message: 'Trade submitted!' + event.body
                  })
                }
              } catch (error){
                console.log('Add trade error: ' + error)
              }
            }
          }
      Tags:
        - Key: owner
          Value: "Tom Chen"

  LambdaIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${LambdaFunctionName}:*
              - Action:
                  - dynamodb:BatchGetItem
                  - dynamodb:BatchWriteItem
                  - dynamodb:GetItem
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                Effect: Allow
                Resource:
                  - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/good-stonks-table
          PolicyName: lambda

  LambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${LambdaFunctionName}
      RetentionInDays: 90
      
  ApiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Description: Stonk Trade API Gateway
      EndpointConfiguration:
        Types:
          - REGIONAL
      Name: 'stonks-api'

  ApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ParentId: !GetAtt 
        - ApiGatewayRestApi
        - RootResourceId
      PathPart: 'trade'

  ApiGatewayPOSTMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref ApiGatewayResource
      HttpMethod: ANY
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub >-
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction.Arn}/invocations
  
  ApiGatewayStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref ApiGatewayDeployment
      RestApiId: !Ref ApiGatewayRestApi
      StageName: !Ref ApiGatewayStageName

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ApiGatewayPOSTMethod
    Properties:
      RestApiId: !Ref ApiGatewayRestApi

  LambdaApiGatewayInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt LambdaFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/${ApiGatewayStageName}/ANY/trade

  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: 'timestamp'
          AttributeType: 'S'
      KeySchema:
        - AttributeName: 'timestamp'
          KeyType: 'HASH'
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      TableName: 'good-stonks-table'

Outputs:
  ApiGatewayInvokeURL:
    Value: !Sub https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/${ApiGatewayStageName}